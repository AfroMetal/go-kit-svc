// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stringsvc.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	stringsvc.proto

It has these top-level messages:
	TitleCaseRequest
	TitleCaseResponse
	RemoveWhitespaceRequest
	RemoveWhitespaceResponse
	CountRequest
	CountResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TitleCaseRequest struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *TitleCaseRequest) Reset()                    { *m = TitleCaseRequest{} }
func (m *TitleCaseRequest) String() string            { return proto1.CompactTextString(m) }
func (*TitleCaseRequest) ProtoMessage()               {}
func (*TitleCaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TitleCaseRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type TitleCaseResponse struct {
	V   string `protobuf:"bytes,1,opt,name=v" json:"v,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *TitleCaseResponse) Reset()                    { *m = TitleCaseResponse{} }
func (m *TitleCaseResponse) String() string            { return proto1.CompactTextString(m) }
func (*TitleCaseResponse) ProtoMessage()               {}
func (*TitleCaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TitleCaseResponse) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *TitleCaseResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RemoveWhitespaceRequest struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *RemoveWhitespaceRequest) Reset()                    { *m = RemoveWhitespaceRequest{} }
func (m *RemoveWhitespaceRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoveWhitespaceRequest) ProtoMessage()               {}
func (*RemoveWhitespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RemoveWhitespaceRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type RemoveWhitespaceResponse struct {
	V   string `protobuf:"bytes,1,opt,name=v" json:"v,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *RemoveWhitespaceResponse) Reset()                    { *m = RemoveWhitespaceResponse{} }
func (m *RemoveWhitespaceResponse) String() string            { return proto1.CompactTextString(m) }
func (*RemoveWhitespaceResponse) ProtoMessage()               {}
func (*RemoveWhitespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RemoveWhitespaceResponse) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *RemoveWhitespaceResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CountRequest struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *CountRequest) Reset()                    { *m = CountRequest{} }
func (m *CountRequest) String() string            { return proto1.CompactTextString(m) }
func (*CountRequest) ProtoMessage()               {}
func (*CountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CountRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type CountResponse struct {
	V int64 `protobuf:"varint,1,opt,name=v" json:"v,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto1.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CountResponse) GetV() int64 {
	if m != nil {
		return m.V
	}
	return 0
}

func init() {
	proto1.RegisterType((*TitleCaseRequest)(nil), "proto.TitleCaseRequest")
	proto1.RegisterType((*TitleCaseResponse)(nil), "proto.TitleCaseResponse")
	proto1.RegisterType((*RemoveWhitespaceRequest)(nil), "proto.RemoveWhitespaceRequest")
	proto1.RegisterType((*RemoveWhitespaceResponse)(nil), "proto.RemoveWhitespaceResponse")
	proto1.RegisterType((*CountRequest)(nil), "proto.CountRequest")
	proto1.RegisterType((*CountResponse)(nil), "proto.CountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for String service

type StringClient interface {
	TitleCase(ctx context.Context, in *TitleCaseRequest, opts ...grpc.CallOption) (*TitleCaseResponse, error)
	RemoveWhitespace(ctx context.Context, in *RemoveWhitespaceRequest, opts ...grpc.CallOption) (*RemoveWhitespaceResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
}

type stringClient struct {
	cc *grpc.ClientConn
}

func NewStringClient(cc *grpc.ClientConn) StringClient {
	return &stringClient{cc}
}

func (c *stringClient) TitleCase(ctx context.Context, in *TitleCaseRequest, opts ...grpc.CallOption) (*TitleCaseResponse, error) {
	out := new(TitleCaseResponse)
	err := grpc.Invoke(ctx, "/proto.String/TitleCase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringClient) RemoveWhitespace(ctx context.Context, in *RemoveWhitespaceRequest, opts ...grpc.CallOption) (*RemoveWhitespaceResponse, error) {
	out := new(RemoveWhitespaceResponse)
	err := grpc.Invoke(ctx, "/proto.String/RemoveWhitespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/proto.String/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for String service

type StringServer interface {
	TitleCase(context.Context, *TitleCaseRequest) (*TitleCaseResponse, error)
	RemoveWhitespace(context.Context, *RemoveWhitespaceRequest) (*RemoveWhitespaceResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
}

func RegisterStringServer(s *grpc.Server, srv StringServer) {
	s.RegisterService(&_String_serviceDesc, srv)
}

func _String_TitleCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServer).TitleCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.String/TitleCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServer).TitleCase(ctx, req.(*TitleCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _String_RemoveWhitespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWhitespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServer).RemoveWhitespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.String/RemoveWhitespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServer).RemoveWhitespace(ctx, req.(*RemoveWhitespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _String_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.String/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _String_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.String",
	HandlerType: (*StringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TitleCase",
			Handler:    _String_TitleCase_Handler,
		},
		{
			MethodName: "RemoveWhitespace",
			Handler:    _String_RemoveWhitespace_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _String_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stringsvc.proto",
}

func init() { proto1.RegisterFile("stringsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2e, 0x29, 0xca,
	0xcc, 0x4b, 0x2f, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a,
	0x0a, 0x5c, 0x02, 0x21, 0x99, 0x25, 0x39, 0xa9, 0xce, 0x89, 0xc5, 0xa9, 0x41, 0xa9, 0x85, 0xa5,
	0xa9, 0xc5, 0x25, 0x42, 0x3c, 0x5c, 0x8c, 0xc5, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x8c,
	0xc5, 0x4a, 0xc6, 0x5c, 0x82, 0x48, 0x2a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x41, 0x4a, 0xca,
	0x60, 0x4a, 0xca, 0x84, 0x04, 0xb8, 0x98, 0x53, 0x8b, 0x8a, 0x24, 0x98, 0xc0, 0x7c, 0x10, 0x53,
	0x49, 0x9d, 0x4b, 0x3c, 0x28, 0x35, 0x37, 0xbf, 0x2c, 0x35, 0x3c, 0x23, 0xb3, 0x24, 0xb5, 0xb8,
	0x20, 0x31, 0x19, 0x87, 0xe9, 0x56, 0x5c, 0x12, 0x98, 0x0a, 0x89, 0xb4, 0x44, 0x86, 0x8b, 0xc7,
	0x39, 0xbf, 0x34, 0xaf, 0x04, 0xbb, 0xc9, 0xb2, 0x5c, 0xbc, 0x50, 0x59, 0x74, 0xe3, 0x98, 0x83,
	0x18, 0xcb, 0x8c, 0xae, 0x33, 0x72, 0xb1, 0x05, 0x83, 0xc3, 0x44, 0xc8, 0x81, 0x8b, 0x13, 0xee,
	0x43, 0x21, 0x71, 0x48, 0xf8, 0xe8, 0xa1, 0x87, 0x8a, 0x94, 0x04, 0xa6, 0x04, 0xc4, 0x60, 0x25,
	0x06, 0xa1, 0x50, 0x2e, 0x01, 0x74, 0x5f, 0x08, 0xc9, 0x41, 0xd5, 0xe3, 0x08, 0x07, 0x29, 0x79,
	0x9c, 0xf2, 0x70, 0x63, 0x4d, 0xb8, 0x58, 0xc1, 0x5e, 0x10, 0x12, 0x86, 0xaa, 0x45, 0xf6, 0xae,
	0x94, 0x08, 0xaa, 0x20, 0x4c, 0x57, 0x12, 0x1b, 0x58, 0xd8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x2e, 0x8f, 0x67, 0xc9, 0xf3, 0x01, 0x00, 0x00,
}
